// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: event.proto

package chrononpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStoreClient is the client API for EventStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStoreClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (EventStore_ScanClient, error)
	SeekTimestamp(ctx context.Context, in *SeekTimestampRequest, opts ...grpc.CallOption) (*SeekTimestampResponse, error)
}

type eventStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreClient(cc grpc.ClientConnInterface) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, "/chronon.EventStore/Append", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (EventStore_ScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStore_ServiceDesc.Streams[0], "/chronon.EventStore/Scan", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStoreScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventStore_ScanClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventStoreScanClient struct {
	grpc.ClientStream
}

func (x *eventStoreScanClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventStoreClient) SeekTimestamp(ctx context.Context, in *SeekTimestampRequest, opts ...grpc.CallOption) (*SeekTimestampResponse, error) {
	out := new(SeekTimestampResponse)
	err := c.cc.Invoke(ctx, "/chronon.EventStore/SeekTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStoreServer is the server API for EventStore service.
// All implementations must embed UnimplementedEventStoreServer
// for forward compatibility
type EventStoreServer interface {
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	Scan(*ScanRequest, EventStore_ScanServer) error
	SeekTimestamp(context.Context, *SeekTimestampRequest) (*SeekTimestampResponse, error)
	mustEmbedUnimplementedEventStoreServer()
}

// UnimplementedEventStoreServer must be embedded to have forward compatible implementations.
type UnimplementedEventStoreServer struct {
}

func (UnimplementedEventStoreServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedEventStoreServer) Scan(*ScanRequest, EventStore_ScanServer) error {
	return status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedEventStoreServer) SeekTimestamp(context.Context, *SeekTimestampRequest) (*SeekTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeekTimestamp not implemented")
}
func (UnimplementedEventStoreServer) mustEmbedUnimplementedEventStoreServer() {}

// UnsafeEventStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServer will
// result in compilation errors.
type UnsafeEventStoreServer interface {
	mustEmbedUnimplementedEventStoreServer()
}

func RegisterEventStoreServer(s grpc.ServiceRegistrar, srv EventStoreServer) {
	s.RegisterService(&EventStore_ServiceDesc, srv)
}

func _EventStore_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chronon.EventStore/Append",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_Scan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).Scan(m, &eventStoreScanServer{stream})
}

type EventStore_ScanServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventStoreScanServer struct {
	grpc.ServerStream
}

func (x *eventStoreScanServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventStore_SeekTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeekTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).SeekTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chronon.EventStore/SeekTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).SeekTimestamp(ctx, req.(*SeekTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStore_ServiceDesc is the grpc.ServiceDesc for EventStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chronon.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _EventStore_Append_Handler,
		},
		{
			MethodName: "SeekTimestamp",
			Handler:    _EventStore_SeekTimestamp_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Scan",
			Handler:       _EventStore_Scan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}

// EventBusClient is the client API for EventBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventBusClient interface {
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (EventBus_StreamClient, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (EventBus_WatchClient, error)
}

type eventBusClient struct {
	cc grpc.ClientConnInterface
}

func NewEventBusClient(cc grpc.ClientConnInterface) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (EventBus_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventBus_ServiceDesc.Streams[0], "/chronon.EventBus/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventBusStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventBus_StreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventBusStreamClient struct {
	grpc.ClientStream
}

func (x *eventBusStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventBusClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (EventBus_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventBus_ServiceDesc.Streams[1], "/chronon.EventBus/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventBusWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventBus_WatchClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventBusWatchClient struct {
	grpc.ClientStream
}

func (x *eventBusWatchClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventBusServer is the server API for EventBus service.
// All implementations must embed UnimplementedEventBusServer
// for forward compatibility
type EventBusServer interface {
	Stream(*StreamRequest, EventBus_StreamServer) error
	Watch(*WatchRequest, EventBus_WatchServer) error
	mustEmbedUnimplementedEventBusServer()
}

// UnimplementedEventBusServer must be embedded to have forward compatible implementations.
type UnimplementedEventBusServer struct {
}

func (UnimplementedEventBusServer) Stream(*StreamRequest, EventBus_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedEventBusServer) Watch(*WatchRequest, EventBus_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedEventBusServer) mustEmbedUnimplementedEventBusServer() {}

// UnsafeEventBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventBusServer will
// result in compilation errors.
type UnsafeEventBusServer interface {
	mustEmbedUnimplementedEventBusServer()
}

func RegisterEventBusServer(s grpc.ServiceRegistrar, srv EventBusServer) {
	s.RegisterService(&EventBus_ServiceDesc, srv)
}

func _EventBus_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventBusServer).Stream(m, &eventBusStreamServer{stream})
}

type EventBus_StreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventBusStreamServer struct {
	grpc.ServerStream
}

func (x *eventBusStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _EventBus_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventBusServer).Watch(m, &eventBusWatchServer{stream})
}

type EventBus_WatchServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventBusWatchServer struct {
	grpc.ServerStream
}

func (x *eventBusWatchServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// EventBus_ServiceDesc is the grpc.ServiceDesc for EventBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chronon.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _EventBus_Stream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _EventBus_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}
